import{ethers as n}from"./_snowpack/pkg/ethers.js";import g from"./artifacts/contracts/Campaign.sol/Campaign.json.proxy.js";import p from"./artifacts/contracts/Campaign.sol/CampaignFactory.json.proxy.js";export const DonateFuncJS=async(e,r)=>{try{const t=new n.providers.Web3Provider(window.ethereum,"any"),o=await t.getNetwork();if(!(o.name=="goerli"&&o.chainId==5))throw"Connect to GoerliETH Network";const a=t.getSigner();await(await new n.Contract(e,g.abi,a).DonateFunc({value:n.utils.parseUnits(r,"ether")})).wait()}catch(t){throw console.log("Error DonateFuncJS"),JSON.parse(JSON.stringify(t)).reason}},ConnectWalletFuncJS=async()=>{if(await window?.ethereum?.request({method:"eth_requestAccounts"})){const e=new n.providers.Web3Provider(window.ethereum,"any"),r=await e.getNetwork();if(!(r.name=="goerli"&&r.chainId==5))throw"Connect to GoerliETH Network";const t=e.getSigner(),o=await t.getAddress(),a=await t.getBalance();return{address:o,balance:n.utils.formatEther(a)}}else throw"Metamask not installed!"},GetAllCompaignFuncJS=async(e,r)=>{const t=new n.providers.JsonRpcBatchProvider(r),o=new n.Contract(e,p.abi,t),a=o.filters.CampaignCreatedEvent();return(await o.queryFilter(a)).map(i=>({title:i.args.title,campaignaddress:i.args.campignAddress,category:i.args.category,descriptionhash:i.args.descHash,imghash:i.args.imgHash,amountrequired:n.utils.formatEther(i.args.requiredAmount),owner:i.args.owner,publisheddate:new Date(parseInt(i.args.timestamp)*1e3).toLocaleString()}))},GetCompaignTransactionsFuncJS=async e=>{const t=new n.providers.JsonRpcBatchProvider(process.env.NEXT_PUBLIC_RPC_URL).getSigner(),o=new n.Contract(e,g.abi,t),a=o.filters.DonatedEvent();return await o.queryFilter(a)},ApproveCampaignFuncJS=async e=>{try{const t=new n.providers.Web3Provider(window.ethereum,"any"),o=await t.getNetwork();if(!(o.name=="goerli"&&o.chainId==5))throw"Connect to GoerliETH Network";const a=t.getSigner();var r=await(await new n.Contract(e,g.abi,a).ApproveFunc()).wait();console.log(r)}catch(t){throw console.log("Error ApproveCampaignFuncJS"),console.log(JSON.parse(JSON.stringify(t)).reason),JSON.parse(JSON.stringify(t)).reason}},TestWallet=async()=>{const r=await new n.providers.Web3Provider(window.ethereum,"any").getNetwork();if(!(r.name=="goerli"&&r.chainId==5))throw"Connect to GoerliETH Network"},CreateCampaignFuncJS=async e=>{for(const i in e)if(!(typeof e[i]!="undefined"&&e[i]))throw`${i} is not defined`;const r=new n.providers.Web3Provider(window.ethereum,"any"),t=await r.getNetwork();if(!(t.name=="goerli"&&t.chainId==5))throw"Connect to GoerliETH Network";const o=r.getSigner(),a=new n.Contract(process.env.NEXT_PUBLIC_ADDRESS,p.abi,o),s=n.utils.parseEther(e.requiredAmount),c=await a.CreateCampaignFunc(e.campaignTitle,s,e.imageHash,e.descHash,e.category);console.log("CreateCampaignFuncJS result: ",c)},GetCompaignsByAddressFuncJS=async e=>{if(!(typeof e!="undefined"&&e))throw"Please provide valid campaign address";const r=new n.providers.JsonRpcBatchProvider(process.env.NEXT_PUBLIC_RPC_URL),t=new n.Contract(process.env.NEXT_PUBLIC_ADDRESS,p.abi,r),o=t.filters.CampaignCreatedEvent(e);let a=await t.queryFilter(o);return console.log(a),a},GetCompaignByAddressByFilterFuncJS=async e=>{if(!(typeof e!="undefined"&&e))throw"Please provide valid campaign address";const r=new n.providers.JsonRpcBatchProvider(process.env.NEXT_PUBLIC_RPC_URL),t=new n.Contract(process.env.NEXT_PUBLIC_ADDRESS,p.abi,r),o=t.filters.CampaignCreatedEvent();let a=await t.queryFilter(o);console.log(a);const s=a.filter(c=>c.args.campignAddress==e);if(s==null)throw"Campaign Not Found!";return console.log("inside blockchain interactions",s),s};const u={goerli:{chainId:5,chainName:"Goerli test network",nativeCurrency:{name:"GoerliETH",symbol:"GoerliETH",decimals:18},rpcUrls:["https://goerli.infura.io/v3/"],blockExplorerUrls:["https://goerli.etherscan.io"]}};
