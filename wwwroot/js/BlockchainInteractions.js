import{ethers as o}from"./_snowpack/pkg/ethers.js";import l from"./artifacts/contracts/Campaign.sol/Campaign.json.proxy.js";const s=require("./artifacts/contracts/Campaign.sol/CampaignFactory.json");export const DonateFuncJS=async(e,n)=>{try{const t=new o.providers.Web3Provider(window.ethereum,"any"),r=await t.getNetwork();if(!(r.name=="goerli"&&r.chainId==5))throw"Connect to GoerliETH Network";const a=t.getSigner();await(await new o.Contract(e,l.abi,a).DonateFunc({value:o.utils.parseUnits(n,"ether")})).wait()}catch(t){throw console.log("Error DonateFuncJS"),JSON.parse(JSON.stringify(t)).reason}},ConnectWalletFuncJS=async()=>{if(await window?.ethereum?.request({method:"eth_requestAccounts"})){const e=new o.providers.Web3Provider(window.ethereum,"any"),n=await e.getNetwork();if(!(n.name=="goerli"&&n.chainId==5))throw"Connect to GoerliETH Network";const t=e.getSigner(),r=await t.getAddress(),a=await t.getBalance();return{address:r,balance:o.utils.formatEther(a)}}else throw"Metamask not installed!"},GetAllCompaignFuncJS=async()=>{const e=new o.providers.JsonRpcBatchProvider(process.env.NEXT_PUBLIC_RPC_URL),n=new o.Contract(process.env.NEXT_PUBLIC_ADDRESS,s.abi,e),t=n.filters.CampaignCreatedEvent();return await n.queryFilter(t)},GetCompaignTransactionsFuncJS=async e=>{const t=new o.providers.JsonRpcBatchProvider(process.env.NEXT_PUBLIC_RPC_URL).getSigner(),r=new o.Contract(e,l.abi,t),a=r.filters.DonatedEvent();return await r.queryFilter(a)},ApproveCampaignFuncJS=async e=>{try{const t=new o.providers.Web3Provider(window.ethereum,"any"),r=await t.getNetwork();if(!(r.name=="goerli"&&r.chainId==5))throw"Connect to GoerliETH Network";const a=t.getSigner();var n=await(await new o.Contract(e,l.abi,a).ApproveFunc()).wait();console.log(n)}catch(t){throw console.log("Error ApproveCampaignFuncJS"),console.log(JSON.parse(JSON.stringify(t)).reason),JSON.parse(JSON.stringify(t)).reason}},TestWallet=async()=>{const n=await new o.providers.Web3Provider(window.ethereum,"any").getNetwork();if(!(n.name=="goerli"&&n.chainId==5))throw"Connect to GoerliETH Network"},CreateCampaignFuncJS=async e=>{for(const p in e)if(!(typeof e[p]!="undefined"&&e[p]))throw`${p} is not defined`;const n=new o.providers.Web3Provider(window.ethereum,"any"),t=await n.getNetwork();if(!(t.name=="goerli"&&t.chainId==5))throw"Connect to GoerliETH Network";const r=n.getSigner(),a=new o.Contract(process.env.NEXT_PUBLIC_ADDRESS,s.abi,r),i=o.utils.parseEther(e.requiredAmount),c=await a.CreateCampaignFunc(e.campaignTitle,i,e.imageHash,e.descHash,e.category);console.log("CreateCampaignFuncJS result: ",c)},GetCompaignsByAddressFuncJS=async e=>{if(!(typeof e!="undefined"&&e))throw"Please provide valid campaign address";const n=new o.providers.JsonRpcBatchProvider(process.env.NEXT_PUBLIC_RPC_URL),t=new o.Contract(process.env.NEXT_PUBLIC_ADDRESS,s.abi,n),r=t.filters.CampaignCreatedEvent(e);let a=await t.queryFilter(r);return console.log(a),a},GetCompaignByAddressByFilterFuncJS=async e=>{if(!(typeof e!="undefined"&&e))throw"Please provide valid campaign address";const n=new o.providers.JsonRpcBatchProvider(process.env.NEXT_PUBLIC_RPC_URL),t=new o.Contract(process.env.NEXT_PUBLIC_ADDRESS,s.abi,n),r=t.filters.CampaignCreatedEvent();let a=await t.queryFilter(r);console.log(a);const i=a.filter(c=>c.args.campignAddress==e);if(i==null)throw"Campaign Not Found!";return console.log("inside blockchain interactions",i),i};const w={goerli:{chainId:5,chainName:"Goerli test network",nativeCurrency:{name:"GoerliETH",symbol:"GoerliETH",decimals:18},rpcUrls:["https://goerli.infura.io/v3/"],blockExplorerUrls:["https://goerli.etherscan.io"]}};
